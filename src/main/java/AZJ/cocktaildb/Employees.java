package AZJ.cocktaildb;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Zohair Khan
 */
public class Employees extends javax.swing.JFrame implements DB{
     public static int NEW_EMP = 1;
    public static int UPDATE_EMP = 0;
    public Connection connection;
    public int mode;

    /**
     * Creates new form Supplier
     */
    public Employees() {
        initComponents();
        refresh();
        mode = NEW_EMP;
      
    }
    
    public boolean connect() {
        try {
            connection = DriverManager.getConnection(databaseURL, databaseUser, databasePass);
            return true;
        } catch (Exception ex) {
            System.out.println("Error - database could not connect" + ex.getMessage());
            return false;
        }
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeelist = new javax.swing.JList<>();
        emp_id = new javax.swing.JTextField();
        emp_name = new javax.swing.JTextField();
        emp_role = new javax.swing.JTextField();
        Refresh = new javax.swing.JButton();
        Insert = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        employeelist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        employeelist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                employeelistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(employeelist);

        emp_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emp_idActionPerformed(evt);
            }
        });

        emp_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emp_nameActionPerformed(evt);
            }
        });

        emp_role.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emp_roleActionPerformed(evt);
            }
        });

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        Insert.setText("Insert");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Employee ID");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Employee Name");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Employee Role");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emp_id, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(emp_name)
                    .addComponent(emp_role))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Refresh)
                        .addComponent(Insert)
                        .addComponent(Update))
                    .addComponent(Delete, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emp_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(emp_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emp_role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
      refresh();  // TODO add your handling code here:
    }//GEN-LAST:event_RefreshActionPerformed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
      emp_id.setText("");
      emp_name.setText("");
      emp_role.setText("");
      mode = NEW_EMP;   // TODO add your handling code here:
    }//GEN-LAST:event_InsertActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        int Emp_id = Integer.parseInt(emp_id.getText());
        String Emp_name = emp_name.getText();
        String Emp_role = emp_role.getText();
        if (mode == NEW_EMP)
        { //Insert
            if (CheckEmp(Emp_id) == true)
            {
                //ID exists, so exit
                JOptionPane.showMessageDialog(new JFrame(), "Employee ID already exists, try a different ID");
            }
            else
            {
                //ID does not exist so continue insert operation
                try {
                    if (connect())
                    {
                        String SQL_INSERT = "INSERT INTO azjproject3.employee (emp_id, emp_name, emp_role"
                                + ") VALUES (?,?,?)";
                        PreparedStatement stmnt = connection.prepareStatement(SQL_INSERT);
                        stmnt.setInt(1, Emp_id);
                        stmnt.setString(2, Emp_name);
                        stmnt.setString(3, Emp_role);
                       

                        int row = stmnt.executeUpdate();

                        // rows affected
                        System.out.println(row); //1
                        JOptionPane.showMessageDialog(new JFrame(), "Added Employee:" +emp_id.getText()+" - "+emp_name.getText() + " - " + emp_role.getText() + " to the database!");
                        refresh();
                        connection.close();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
                    }

                }
                catch (Exception ex)
                {
                    JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:" + ex.getMessage());
                }

            }
        }
        else if (mode == UPDATE_EMP)
        {  //Update
            try
            {
                if (connect())
                {
                    String query = "Update employee set  emp_id=?,emp_name=?,emp_role=?"
                     + "where emp_id=?";
                    PreparedStatement stmnt = connection.prepareStatement(query); 
                    stmnt.setInt(1, Emp_id);
                    stmnt.setString(2, Emp_name);
                    stmnt.setString(3,  Emp_role);
                    stmnt.setInt(4,  Emp_id);

                    int row = stmnt.executeUpdate();

                    // rows affected
                    System.out.println(row); //1
                    JOptionPane.showMessageDialog(new JFrame(), "Updated Employee: "+Emp_id+" - " + Emp_name + " - " + Emp_role + " to the database!");
                    refresh();
                    connection.close();
                }
                else
                {
                    JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
                }
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:\n" + ex.getMessage());
            }
        }
        else
        { //do nothing

        } 
        
        
    }//GEN-LAST:event_UpdateActionPerformed

    private void employeelistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_employeelistValueChanged
        int index = employeelist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        String s = (String) employeelist.getSelectedValue();
        System.out.println("Value Selected: " + s);
        String[] parts = s.split("-");
        String ID = parts[0].trim();
        System.out.println("emp_ID: " + ID );
        refreshForm(Integer.parseInt(ID));
        mode = UPDATE_EMP;    // TODO add your handling code here:DO add your handling code here:
    }//GEN-LAST:event_employeelistValueChanged

    private void emp_roleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emp_roleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emp_roleActionPerformed

    private void emp_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emp_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emp_nameActionPerformed

    private void emp_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emp_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emp_idActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        int Emp_id = Integer.parseInt(emp_id.getText());
        try
        {
            if (connect()) {
                String SQL_DELETE = "DELETE FROM azjproject3.employee WHERE emp_ID=?";
                PreparedStatement stmnt = connection.prepareStatement(SQL_DELETE);
                stmnt.setInt(1, Emp_id);


                int row = stmnt.executeUpdate();

                // rows affected
                System.out.println(row); //1
                JOptionPane.showMessageDialog(new JFrame(), "Deleted Employee: " +emp_id.getText()+" - "+emp_name.getText() + " - " + emp_role.getText() + " from the database!");
                refresh();
                connection.close();
            }
            else
            {
                JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
            }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:" + ex.getMessage());
        }
    }//GEN-LAST:event_DeleteActionPerformed

     public boolean CheckEmp(int emp_id) {
        try {
            if (connect()) {
                String query = "select * from employee where emp_id=" + emp_id;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                int size = 0;
                if (!rs.next()) { //A row exists so there is a match!
                    return false;
                } else {
                    return true;
                }
            }
            refresh();
            connection.close();
        } catch (Exception exception) {
            return true; //Dtabase Error
        };
        return true; //ID does not exist
    }
     public void refresh() {
        try {
            if (connect()) {
                String query = "select * from employee";

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                DefaultListModel listModel;
                listModel = new DefaultListModel();
                while (rs.next()) {
                    listModel.addElement(rs.getString("emp_id") + " - " + rs.getString("emp_name") 
                    + " - " + rs.getString("emp_role"));
                }
                employeelist.setModel(listModel);

                //refresh();
                connection.close();
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
     
      public void refreshForm(int emp_idn) {
        try {
            if (connect()) {
                String query = "select * from employee where emp_id='" + emp_idn+"'";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                while (rs.next()) {
                    emp_id.setText(rs.getString("emp_id"));
                    emp_name.setText(rs.getString("emp_name"));
                    emp_role.setText(rs.getString("emp_role"));
                }
            }
            refresh();
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Supplier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Supplier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Supplier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Supplier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Supplier().setVisible(true);

            }
        });
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Insert;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Update;
    private javax.swing.JTextField emp_id;
    private javax.swing.JTextField emp_name;
    private javax.swing.JTextField emp_role;
    private javax.swing.JList<String> employeelist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
