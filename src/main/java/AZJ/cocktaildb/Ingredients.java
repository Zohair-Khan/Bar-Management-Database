/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package AZJ.cocktaildb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
/**
 *
 * @author Zohair Khan
 */
public class Ingredients extends javax.swing.JFrame implements DB{
    public static int NEW_INGREDIENT = 1;
    public static int UPDATE_INGREDIENT = 0;
    public Connection connection;
    public int mode;
    

    /**
     * Creates new form Ingredients
     */
    public Ingredients() {
        initComponents();
        refresh();
        mode = NEW_INGREDIENT;
    }
    
    public boolean connect() {
        try {
            connection = DriverManager.getConnection(databaseURL, databaseUser, databasePass);
            return true;
        } catch (Exception ex) {
            System.out.println("Error - database could not connect" + ex.getMessage());
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ingredients_name = new javax.swing.JTextField();
        ingredients_type = new javax.swing.JTextField();
        taste_name = new javax.swing.JTextField();
        ingredients_inventory = new javax.swing.JTextField();
        sup_name = new javax.swing.JTextField();
        ingredients_cost = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        IngredientsList = new javax.swing.JList<>();
        RefreshButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        InsertButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ingredients_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredients_nameActionPerformed(evt);
            }
        });

        ingredients_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredients_typeActionPerformed(evt);
            }
        });

        taste_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taste_nameActionPerformed(evt);
            }
        });

        ingredients_inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredients_inventoryActionPerformed(evt);
            }
        });

        sup_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sup_nameActionPerformed(evt);
            }
        });

        ingredients_cost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredients_costActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("    Ingredients Cost");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Supplier Name");

        jLabel3.setText(" Ingredients Inventory");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Taste Name");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText(" Ingredients Type");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Ingredients Name");

        IngredientsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        IngredientsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                IngredientsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(IngredientsList);

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        InsertButton.setText("Insert");
        InsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(InsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ingredients_cost, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(sup_name, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ingredients_inventory, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taste_name)
                    .addComponent(ingredients_type)
                    .addComponent(ingredients_name)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshButton)
                    .addComponent(UpdateButton)
                    .addComponent(InsertButton)
                    .addComponent(DeleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredients_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredients_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(taste_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredients_inventory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sup_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredients_cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ingredients_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredients_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredients_nameActionPerformed

    private void ingredients_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredients_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredients_typeActionPerformed

    private void taste_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taste_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taste_nameActionPerformed

    private void ingredients_inventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredients_inventoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredients_inventoryActionPerformed

    private void ingredients_costActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredients_costActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredients_costActionPerformed

    private void sup_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sup_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sup_nameActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        String Ingredients_Name = ingredients_name.getText();
        String Ingredients_Type = ingredients_type.getText();
        String Taste_Name = taste_name.getText();
        String Ingredients_Inventory = ingredients_inventory.getText();
        String Supplier_Name = sup_name.getText();
        String Ingredients_Cost = ingredients_cost.getText();
        
        
        if (mode == NEW_INGREDIENT)
        { //Insert
            if (CheckIngredient(sup_name.getText()) == false)
            {
                //ID exists, so exit
                JOptionPane.showMessageDialog(new JFrame(), "Ingredient already exists, try a different name");
            }
            else
            {
                //ID does not exist so continue insert operation
                try {
                    if (connect())
                    {
                        String SQL_INSERT = "INSERT INTO azjproject3.ingredients (ingredients_name, ingredients_type, taste_name, ingredients_inventory, sup_name, ingredients_cost"
                                + ") VALUES (?,?,?,?,?,?)";
                        PreparedStatement stmnt = connection.prepareStatement(SQL_INSERT);
                        stmnt.setString(1, Ingredients_Name);
                        stmnt.setString(2, Ingredients_Type);
                        stmnt.setString(3, Taste_Name);
                        stmnt.setString(4, Ingredients_Inventory);
                        stmnt.setString(5, Supplier_Name);
                        stmnt.setString(6, Ingredients_Cost);
                       

                        int row = stmnt.executeUpdate();

                        // rows affected
                        System.out.println(row); //1
                        JOptionPane.showMessageDialog(new JFrame(), "Added ingredient:" +ingredients_name.getText()+" - "+ ingredients_type.getText() + " - " + taste_name.getText() + " - " + ingredients_inventory.getText() + " - " + sup_name.getText() + " - " + ingredients_cost.getText() + " to the database!");
                        refresh();
                        connection.close();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
                    }

                }
                catch (Exception ex)
                {
                    JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:" + ex.getMessage());
                }

            }
        }
        else if (mode == UPDATE_INGREDIENT)
        {  //Update
            try
            {
                if (connect())
                {
                    String query = "Update ingredients set  ingredients_name=?, ingredients_type=?, taste_name=?, ingredients_inventory=?, sup_name=?, ingredients_cost=?"
                     + "where ingredients_name=?";
                    PreparedStatement stmnt = connection.prepareStatement(query); 
                    stmnt.setString(1, Ingredients_Name);
                    stmnt.setString(2, Ingredients_Type);
                    stmnt.setString(3, Taste_Name);
                    stmnt.setString(4, Ingredients_Inventory);
                    stmnt.setString(5, Supplier_Name);
                    stmnt.setString(6, Ingredients_Cost);
                    stmnt.setString(7, Ingredients_Name);

                    int row = stmnt.executeUpdate();

                    // rows affected
                    System.out.println(row); //1
                    JOptionPane.showMessageDialog(new JFrame(), "Updated Ingredients: "+Ingredients_Name+" - " + Ingredients_Type + " - " + Taste_Name + " - " + Ingredients_Inventory + " - " + Supplier_Name + " - " + Ingredients_Cost + " to the database!");
                    refresh();
                    connection.close();
                }
                else
                {
                    JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
                }
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:\n" + ex.getMessage());
            }
        }
        else
        { //do nothing

        } 
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void InsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertButtonActionPerformed
        ingredients_cost.setText("");
        ingredients_inventory.setText("");
        ingredients_name.setText("");
        ingredients_type.setText("");
        sup_name.setText("");
        taste_name.setText("");
        mode = NEW_INGREDIENT;
       // TODO add your handling code here:
    }//GEN-LAST:event_InsertButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
     refresh();   // TODO add your handling code here:
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void IngredientsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_IngredientsListValueChanged
        int index = IngredientsList.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        String s = (String) IngredientsList.getSelectedValue();
        System.out.println("Value Selected: " + s);
        String[] parts = s.split("-");
        String ID = parts[0].trim();
        System.out.println("ingredients_name: " + ID );
        refreshForm(ID);
        mode = UPDATE_INGREDIENT;         // TODO add your handling code here:
    }//GEN-LAST:event_IngredientsListValueChanged

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed

        String Ingredients_Name = ingredients_name.getText();
        try
        {
            if (connect()) {
                String SQL_DELETE = "DELETE FROM azjproject3.ingredients WHERE ingredients_name=?";
                PreparedStatement stmnt = connection.prepareStatement(SQL_DELETE);
                stmnt.setString(1, Ingredients_Name);


                int row = stmnt.executeUpdate();

                // rows affected
                System.out.println(row); //1
                JOptionPane.showMessageDialog(new JFrame(), "Deleted Ingredient: "+
                    ingredients_name.getText()+" - " + 
                    ingredients_type.getText() + " - " + 
                    taste_name.getText() + " - " + 
                    ingredients_inventory.getText() + " - " + 
                    sup_name.getText() + " - " + 
                    ingredients_cost.getText() + " from the database!");
                refresh();
                connection.close();
            }
            else
            {
                JOptionPane.showMessageDialog(new JFrame(), "Unable to connect to the database");
            }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(new JFrame(), "There was an issue updating the database:" + ex.getMessage());
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    public boolean CheckIngredient(String ingredient) {
        try {
            if (connect()) {
                String query = "select * from ingredients where ingredients_name=" + ingredient;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                int size = 0;
                if (!rs.next()) { //A row exists so there is a match!
                    return false;
                } else {
                    return true;
                }
            }
            refresh();
            connection.close();
        } catch (Exception exception) {
            return true; //Dtabase Error
        };
        return true; //ID does not exist
    }
     public void refresh() {
        try {
            if (connect()) {
                String query = "select * from Ingredients";

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                DefaultListModel listModel;
                listModel = new DefaultListModel();
                while (rs.next()) {
                    listModel.addElement(rs.getString("ingredients_name") + " - " + rs.getString("ingredients_inventory") 
                    + " - " + rs.getString("ingredients_cost")+ " - "  + rs.getString("ingredients_type")+ " - "  + rs.getString("sup_name")+ " - " + rs.getString("taste_name"));
                }
                IngredientsList.setModel(listModel);

                //refresh();
                connection.close();
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
     
      public void refreshForm(String ingredient_name) {
        try {
            if (connect()) {
                String query = "select * from Ingredients where ingredients_name='" + ingredient_name+"'";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                while (rs.next()) {
                    ingredients_name.setText(rs.getString("ingredients_name"));
                    ingredients_type.setText(rs.getString("ingredients_type"));
                    taste_name.setText(rs.getString("taste_name"));
                    ingredients_inventory.setText(rs.getString("ingredients_inventory"));
                    sup_name.setText(rs.getString("sup_name"));
                    ingredients_cost.setText(rs.getString("ingredients_cost"));                               
                }
            }
            refresh();
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ingredients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ingredients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ingredients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ingredients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ingredients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.JList<String> IngredientsList;
    private javax.swing.JButton InsertButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTextField ingredients_cost;
    private javax.swing.JTextField ingredients_inventory;
    private javax.swing.JTextField ingredients_name;
    private javax.swing.JTextField ingredients_type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField sup_name;
    private javax.swing.JTextField taste_name;
    // End of variables declaration//GEN-END:variables
}
